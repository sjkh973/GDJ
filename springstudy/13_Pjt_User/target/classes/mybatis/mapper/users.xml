<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.gdu.app13.mapper.UserMapper">

   <!-- id의 이름에는 어떤 목적으로 쓴다기보다는 여러번 한 쿼리를 사용할 수있으니 쿼리에 따른 결과와 함께 네이밍 해주는 것이 좋다. -->
<!--    <select id="selectUserById" parameterType="String" resultType="UserDTO"> 아이디 중복체크
      SELECT USER_NO, ID, PW, NAME, GENDER, EMAIL, MOBILE, BIRTHYEAR, BIRTHDAY, POSTCODE, ROAD_ADDRESS, JIBUN_ADDRESS, DETAIL_ADDRESS, EXTRA_ADDRESS, AGREE_CODE, SNS_TYPE, JOIN_DATE, PW_MODIFY_DATE, INFO_MODIFY_DATE, SESSION_ID, SESSION_LIMIT_DATE
        FROM USERS
       WHERE ID = #{id}
   </select>
   
   <select id="selectUserByEmail" parameterType="String" resultType="UserDTO">
      SELECT USER_NO, ID, PW, NAME, GENDER, EMAIL, MOBILE, BIRTHYEAR, BIRTHDAY, POSTCODE, ROAD_ADDRESS, JIBUN_ADDRESS, DETAIL_ADDRESS, EXTRA_ADDRESS, AGREE_CODE, SNS_TYPE, JOIN_DATE, PW_MODIFY_DATE, INFO_MODIFY_DATE, SESSION_ID, SESSION_LIMIT_DATE
        FROM USERS
       WHERE Email = #{email}
   </select>
   
   로그인
   <select id="selectUserByIdPw" parameterType="UserDTO" resultType="UserDTO">
      SELECT USER_NO, ID, PW, NAME, GENDER, EMAIL, MOBILE, BIRTHYEAR, BIRTHDAY, POSTCODE, ROAD_ADDRESS, JIBUN_ADDRESS, DETAIL_ADDRESS, EXTRA_ADDRESS, AGREE_CODE, SNS_TYPE, JOIN_DATE, PW_MODIFY_DATE, INFO_MODIFY_DATE, SESSION_ID, SESSION_LIMIT_DATE
        FROM USERS
       WHERE ID = #{id}
         AND PW = #{pw}
   </select> -->
   
   <!-- 아이디 중복체크1, 이메일 중복체크, 로그인, 로그인 유지를 이용한 로그인, 마이페이지 가기 전 비번 확인  -->
   <select id="selectUserByMap" parameterType="Map" resultType="UserDTO">
      SELECT USER_NO, ID, PW, NAME, GENDER, EMAIL, MOBILE, BIRTHYEAR, BIRTHDAY, POSTCODE, ROAD_ADDRESS, JIBUN_ADDRESS, DETAIL_ADDRESS, EXTRA_ADDRESS, AGREE_CODE, SNS_TYPE, JOIN_DATE, PW_MODIFY_DATE, INFO_MODIFY_DATE, SESSION_ID, SESSION_LIMIT_DATE
        FROM USERS
    <where> <!-- if 태그를 썼기때문에 AND나 OR이 먼저나오면, 알아서 무시한다. -->
      <if test="id != null">
         ID = #{id}
      </if>
      <if test="pw != null">
         AND PW = #{pw}   
      </if>
      <if test="email != null">
         AND Email = #{email}
      </if>
      <if test="sessionId != null">
      	AND SESSION_ID = #{sessionId}
      	AND  SESSION_LIMIT_DATE > SYSDATE
      </if>
    </where>
      
   </select>
   
   <select id="selectRetireUserById" parameterType="String" resultType="RetireUserDTO">
      SELECT ID
        FROM RETIRE_USERS
       WHERE ID = #{id}
   </select>
   

   <!-- 일반회원가입 -->
   <insert id="insertUser" parameterType="UserDTO">
      INSERT INTO USERS
           (USER_NO, ID, PW, NAME, GENDER, EMAIL, MOBILE, BIRTHYEAR, BIRTHDAY, POSTCODE, ROAD_ADDRESS, JIBUN_ADDRESS, DETAIL_ADDRESS, EXTRA_ADDRESS, AGREE_CODE, SNS_TYPE, JOIN_DATE, PW_MODIFY_DATE, INFO_MODIFY_DATE, SESSION_ID, SESSION_LIMIT_DATE)
      VALUES
         (USERS_SEQ.NEXTVAL, #{id}, #{pw}, #{name}, #{gender}, #{email}, #{mobile}, #{birthyear}, #{birthday}, #{postcode}, #{roadAddress}, #{jibunAddress}, #{detailAddress}, #{extraAddress}, #{agreeCode}, NULL, SYSDATE, SYSDATE, SYSDATE, NULL, NULL)
   </insert>
   
   <!-- 로그인 기록(ACCESS_LOG) 남기기. 회원로그기록 테이블에 id밖에없어서 ID값을 받아서 처리한다. -->
   <update id="updateAccessLog" parameterType="String">
      UPDATE ACCESS_LOG
         SET LAST_LOGIN_DATE = SYSDATE
       WHERE ID = #{id}
   </update>
   <insert id="insertAccessLog" parameterType="String">
      INSERT INTO ACCESS_LOG
         (ACCESS_LOG_NO, ID, LAST_LOGIN_DATE)
      VALUES
         (ACCESS_LOG_SEQ.NEXTVAL, #{id}, SYSDATE)
   </insert>
   
   <!-- 회원탈퇴1 : USERS 테이블에서 제거 -->
   <delete id="deleteUser" parameterType="int">
      DELETE
        FROM USERS
       WHERE USER_NO = #{userNo}
   </delete>
   
   <!-- 회원탈퇴2 : RETIRE_USERS 테이블에 추가 --> <!-- 탈퇴, 휴면에는 sequence를 안만들어놓음 -->
   <insert id="insertRetireUser" parameterType="RetireUserDTO">
      INSERT INTO RETIRE_USERS
         (USER_NO, ID, JOIN_DATE, RETIRE_DATE)
      VALUES
         (#{userNo}, #{id}, #{joinDate}, SYSDATE) <!-- 삭제할 때 필요한데이터 3개는 Session에 정보가 저장되어 있음 -->
   </insert>
   
   <!-- 로그인 유지를 위한 SESSION_ID / SESSION_LIMIT_DATE 업데이트 /// NULL 값이 들어있으므로 업데이트로 해줌 -->
   <update id="updateSessionInfo" parameterType="USERDTO">
   		UPDATE USERS
   		   SET SESSION_ID = #{sessionId}
   		     , SESSION_LIMIT_DATE = #{sessionLimitDate}
   		 WHERE ID = #{id}    
   </update>
   
   <!-- 마이페이지 : 비밀번호 수정 -->
    <update id="updateUserPassword" parameterType="UserDTO">
    	UPDATE USERS
    	   SET PW = #{pw}
    	     , PW_MODIFY_DATE = SYSDATE
    	 WHERE USER_NO = #{userNo}    
    </update>
    
   
</mapper>